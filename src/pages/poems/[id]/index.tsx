import React from "react";
import { Post } from "@prisma/client";
import Image from "next/image";

import { trpc } from "@/utils/trpc";
import {
  PoemParameters,
  PoemParametersType,
} from "@/components/PoemParameters";
import { Divider } from "@/components/common/Divider";
import Head from "next/head";
import Layout from "@/layout/Layout";
import { SEOComponent } from "@/components/SEOComponent";
import { SITE_URL } from "@/constants/constants";
import { useRouter } from "next/router";
import { Loader } from "@/components/common/Loader";

export default function Poem() {
  const router = useRouter();

  const {
    query: { id },
  } = router;

  const { data: post, isLoading } = trpc.poemRequest.getOne.useQuery({
    id: id as string,
  });

  const replaceWhiteSpace = (str: string) =>
    str?.replaceAll(/\n\n/g, "\n").replaceAll(/\n/g, "<br />");

  const title = post?.title || "Poems By AI";
  const description =
    post?.content ||
    "Poems generated by OpenAI's GPT-3 language model. This website is investigating the capabilities of GPT-3 and how it can be used to generate poetry.";
  const url = `${SITE_URL}/poems/${id}`;

  return (
    <>
      <Head>
        <title>Poems By AI</title>
        <link
          rel="icon"
          href="https://res.cloudinary.com/dmiizmobu/image/upload/c_scale,w_64/v1668858555/openai-beauty/DALL_E_2022-11-19_12.46.31_-_Make_a_favicon_representing_AI_being_creative_monkey_pixels_2.png"
        />
        <SEOComponent
          title={title}
          description={description}
          siteUrl={url}
          imageUrl={post?.imageUrl}
        />
      </Head>
      <Layout>
        <section>
          {isLoading ? (
            <Loader loadingText="Loading..." />
          ) : (
            <>
              {post ? (
                <div className="max-w-md mx-auto text-gray-600 my-6">
                  <h1 className="text-3xl font-light mb-4">{post?.title}</h1>
                  {post?.imageUrl && (
                    <Image
                      className="rounded-lg shadow-lg"
                      src={post.imageUrl}
                      alt={`Image of ${post.title}`}
                      width={500}
                      height={500}
                    />
                  )}
                  {post?.content && (
                    <p
                      className="text-xl italic my-8"
                      dangerouslySetInnerHTML={{
                        __html: replaceWhiteSpace(post?.content),
                      }}
                    />
                  )}
                  <p>By {post?.author}</p>
                  <Divider />
                  <PoemParameters
                    params={post?.poemParams as PoemParametersType}
                  />
                </div>
              ) : (
                <p>No post found</p>
              )}
            </>
          )}
        </section>
      </Layout>
    </>
  );
}
